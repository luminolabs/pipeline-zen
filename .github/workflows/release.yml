name: Create Release

# Allow only one Release at a time
# to avoid race conditions when multiple PRs are merged to master
concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

on:
  pull_request:
    # Only trigger on PR closure and merge to master branch
    types: [ closed ]
    branches: [ master ]
    # Run workflow only if these folders changed
    paths: ['lib-celery/**', 'lib-common/**', 'lib-workflows/**', 'app-configs/**', 'job-configs/**', 'celery.Dockerfile', 'scripts/**']

permissions:
  # Allows this workflow to push changes to the git repo
  # we need this to commit and push the updated VERSION file
  contents: write
  # Needed by the OIDC token exchange process with GCP
  id-token: write

env:
  IMAGE_NAME: train_evaluate-workflow
  IMAGE_TAG: us-central1-docker.pkg.dev/neat-airport-407301/lum-docker-images/train_evaluate-workflow
  WORKFLOW_URL: "${{github.SERVER_URL}}/${{github.REPOSITORY}}/actions/runs/${{github.RUN_ID}}"
  ARTIFACT_REPO_URL: "https://console.cloud.google.com/artifacts/docker/neat-airport-407301/us-central1/lum-docker-images/train_evaluate-workflow?project=neat-airport-407301"

jobs:
  unit-tests:
    if: github.event.pull_request.merged == true
    uses: ./.github/workflows/unit-tests.yml
  release:
    needs: unit-tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Git Repo
        uses: actions/checkout@v4
      - name: Set COMMIT_AUTHOR env
        run: echo "COMMIT_AUTHOR=$(git log -1 --pretty=%an)" >> $GITHUB_ENV
      - name: Notify Slack - Started
        run: |
          curl -X POST -H 'Content-type: application/json' \
          --data '{"text":"version: `pending` | commit: `${{github.SHA}}` | user: `${{env.COMMIT_AUTHOR}}` | status: `started` | <${{env.WORKFLOW_URL}}|GHA link>"}' \
          https://hooks.slack.com/services/${{secrets.SLACK_KEY_RELEASES}}
      - name: Set up Google Cloud SDK Authentication
        uses: google-github-actions/auth@v2
        with:
          project_id: 'neat-airport-407301'
          workload_identity_provider: 'projects/482988686822/locations/global/workloadIdentityPools/github/providers/pipeline-zen'
      - name: "Set up Cloud SDK"
        uses: "google-github-actions/setup-gcloud@v2"
      - name: "Docker auth"
        run: gcloud auth configure-docker us-central1-docker.pkg.dev
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Bump Version
        run: |
          PYTHONPATH=$(pwd)/lib-common/src python ./scripts/bump_version.py -p minor
          echo "NEXT_VERSION=$(cat VERSION)" >> $GITHUB_ENV
      - name: Commit new version and push to git repo
        run: |
          git config --global user.name 'lumino-bot'
          git config --global user.email 'lumino-bot@luminolabs.ai'
          git commit -am "Version bump to ${{env.NEXT_VERSION}}"
          git push
      - name: Create Git tag
        run: git tag -a ${{ env.NEXT_VERSION }} -m "Release ${{ env.NEXT_VERSION }}"
      - name: Push Git tag
        run: git push origin ${{ env.NEXT_VERSION }}
      - name: Build and push Docker image
        run: |
          docker buildx build -f celery.Dockerfile --push \
            --tag ${{env.IMAGE_TAG}}:latest} \
            --tag ${{env.IMAGE_TAG}}:${{ env.NEXT_VERSION }} \
            --tag ${{env.IMAGE_TAG}}:${{ github.sha }} \
      - name: Build Jobs VM image
        run: ./scripts/deploy-release.sh
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.NEXT_VERSION }}
          name: Release ${{ env.NEXT_VERSION }}
      - name: Notify Slack - Success
        run: |
          curl -X POST -H 'Content-type: application/json' \
          --data '{"text":"version: `${{env.NEXT_VERSION}}` | commit: `${{github.SHA}}` | user: `${{env.COMMIT_AUTHOR}}` | status: `success` | <${{env.WORKFLOW_URL}}|GHA link> | <${{env.ARTIFACT_REPO_URL}}|image link>"}' \
          https://hooks.slack.com/services/${{secrets.SLACK_KEY_RELEASES}}
  on-failure:
    if: failure() || cancelled()
    needs: [ release ]
    runs-on: ubuntu-latest
    steps:
      - name: Notify Slack - Failure
        run: |
          curl -X POST -H 'Content-type: application/json' \
          --data '{"text":"commit: `${{github.SHA}}` | status: `failed` | <${{env.WORKFLOW_URL}}|GHA link>"}' \
          https://hooks.slack.com/services/${{secrets.SLACK_KEY_RELEASES}}